/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_LEFTMOTORCYCLE_H_
#define JSONRPC_CPP_STUB_LEFTMOTORCYCLE_H_

#include <jsonrpccpp/server.h>

class leftMotorcycle : public jsonrpc::AbstractServer<leftMotorcycle>
{
    public:
        leftMotorcycle(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<leftMotorcycle>(conn, type)
        {
            this->bindAndAddMethod(jsonrpc::Procedure("move", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"json_object",jsonrpc::JSON_OBJECT,"object_id",jsonrpc::JSON_STRING, NULL), &leftMotorcycle::moveI);
        }

        inline virtual void moveI(const Json::Value &request, Json::Value &response)
        {
            response = this->move(request["action"].asString(), request["class_id"].asString(), request["json_object"], request["object_id"].asString());
        }
        virtual Json::Value move(const std::string& action, const std::string& class_id, const Json::Value& json_object, const std::string& object_id) = 0;
};

#endif //JSONRPC_CPP_STUB_LEFTMOTORCYCLE_H_
